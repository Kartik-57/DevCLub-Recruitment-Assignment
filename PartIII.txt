1. HTTP and basic working of the web.

    • What is HTTP? How does it exchange messages between servers and clients? Read about Request and Response HTTP Messages.

    - It is a request-response TCP/IP protocol (set of fixed rules) that is used to share hypermedia (media elements of hypertext extended system). 
      The request-response protocol follows client-server model. The client generates and sends a Request message to the server (through the web) and 
      the server processes it and accordingly sends back a Response message.
      These messages consists of Start line, Headers, Body.
      Request message contains Method (type of request), URI (location of a file on server)
      , HTTP version, Host address and other details of data requested or entereed by user.
      Response message contains HTTP version, status code (according to data processed or stored)
      and other data that was requested by client.

    • What are the different HTTP methods that can be specified in a request? Document the common use-case for a few of them.

    - Some are: GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE
      
      for eg; 
            GET /PathOfFile HTTP/1.1
            User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
            Host: www.website.com
            Accept-Language: en-us
            Connection: Keep-Alive

            PUT /PathOfFile HTTP/1.1
            User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
            Host: www.website.com
            Accept-Language: en-us
            Connection: Keep-Alive
            Content-type: text/html
            Content-Length: 182
            
            <html>
            <body>
            <h1>Hello, World!</h1>
            </body>
            </html>

      • Find out how to see the request and responses being sent by your web
        browser. Generally, it is the networks tab in the developer console. Go
        to any website, take any request and examine the headers. What is the
        User-Agent header for the request?

      - Inspect<<Network<<"Select .js file"<<Headers<<Request Headers:
        Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36

      • Most likely, the User-Agent would’ve been a very complicated string
        starting with Mozilla. Who knew that the company who makes Firefox
        was so prevalent.. Read about the history of the User-Agent string and
        document it briefly. Specifically, what does Mozilla mean in this context?
        What about Gecko?

      - The user agent application is Mozilla version 5.0, or a piece of software compatible with it.
        The words "like Gecko" are included in the user agent string so pages designed for Gecko can also be identified by web servers.
      
      Additionally, read about HTTP Headers and describe some of them (such as
      Host, User-Agent, etc.).

      - The Host request header specifies the host and port number of the server to which the request is being sent.
        When a browser (or similar device) loads a website, it identifies itself as an user-agent when it retrieves the content requested by a characteristic string.
        ETag: A unique string identifying the version of the resource. Conditional requests using If-Match and If-None-Match use this value to change the behavior of the request.
        Connection: Controls whether the network connection stays open after the current transaction finishes.
        Cookie: Contains stored HTTP cookies previously sent by the server with the Set-Cookie header.

2. Research and document how web cookies work.

    • What are cookies? How does a website set a cookie and why would it
      do that?

    - HTTP cookies are used to identify specific users and improve your web browsing experience.
      Data stored in a cookie is created by the server upon your connection. This data is labeled with an ID unique to you and your computer. 
      When the cookie is exchanged between your computer and the network server, the server reads the ID and knows what information to specifically serve to you.
      Cookies are set using the Set-Cookie HTTP header, sent in an HTTP response from the web server. 
      This header instructs the web browser to store the cookie and send it back in future requests to the server.
      Session management. Personalization. Tracking.
    
    • What are the different attributes that can be applied while setting a
      cookie? What do they achieve?

    - Secure Domain Path HTTPOnly Expires
      The 'Secure' attribute makes sure that the cookie will only be sent with requests made over an encrypted connection.
      The 'domain' attribute signifies the domain for which the cookie is valid.
      The 'path' attribute signifies the URL or path for which the cookie is valid.
      When 'HTTPOnly' attribute is set, client-side scripts are not allowed to access the cookie.
      'Expires' signifies how long the browser should use the persistent cookie and when the cookie should be deleted.

    • How do cookies assist in advertising companies (such as Google) being
      able to track users across different sites?

    - Cookies can store user behavior information such as how long you were at their site, what you clicked on, 
      items you left in a shopping cart, preferences or settings that you chose and much more.
      These cookies are stored by the browser even after the browser is closed. 
      They are returned to the issuer every time you visit the site that issued the cookie or view a site 
      that contains a resource (such as an ad) issued by the original cookie issuer.

3. Read about Cross-Origin Resource Sharing (CORS)

    • When is the CORS mechanism required?
  
    - Modern browsers use the Same-Origin Policy (SOP) by default which means that fetching resources from other origins is not allowed. 
      However, in some situations, such operations are necessary. Cross-Origin Resource Sharing (CORS) was designed to address such situations using HTTP response headers.

    • What are the headers set in CORS and how do their values affect things?
      
    - Request Headers: Origin, Access-Control-Request-Method, Access-Control-Request-Headers
      Response headers:
            Access-Control-Allow-Origin
            Access-Control-Allow-Credentials
            Access-Control-Expose-Headers
            Access-Control-Max-Age
            Access-Control-Allow-Methods
            Access-Control-Allow-Headers
      They contain info for on which origin are allowed access, for how long, for which methods etc.

    • What are CORS preflight requests? When are these requests sent? How does a CORS preflight request look like?

    - It is an OPTIONS request, using three HTTP request headers: 
      Access-Control-Request-Method, Access-Control-Request-Headers, and the Origin header.
      For preflighted requests the browser first sends an HTTP request using the OPTIONS method to the resource on the other origin, 
      in order to determine if the actual request is safe to send. Cross-site requests are preflighted like this since they may have implications to user data.
      They have following properties:
            The request's HTTP method is OPTIONS
            It has an Origin header
            It has an Access-Control-Request-Method header, 
            indicating what's the actual method it's trying to use
            to consume your service/resource